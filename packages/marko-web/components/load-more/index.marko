import { getAsObject, getAsArray } from "@parameter1/base-cms-object-path";

$ const { components, fragments } = out.global;

$ const Component = components.get(input.componentName);
$ const pageNumber = input.pageNumber || 1;

$ const resolveQueryFragment = (typeof fragments.get(input.fragmentName) === 'function' && input.fragmentInput) ? fragments.get(input.fragmentName)(input.fragmentInput) : fragments.get(input.fragmentName);

$ const queryParams = {
  ...getAsObject(input, "queryParams"),
  queryName: "LoadMore",
  queryFragment: resolveQueryFragment,
};

<if(Component)>
  <marko-web-query|{ nodes, pageInfo }| name=input.queryName params=queryParams>
    <if(nodes.length)>
      <marko-web-page-container
        tag="section"
        ...input.pageInput
        modifiers=["load-more", `page-${pageNumber}`, ...getAsArray(input, "pageInput.modifiers")]
        attrs=input.attrs
      >
        <!-- Fire generic `load-more-in-view` event (other services can attach to this, e.g. GTM) -->
        <marko-web-browser-component name="TriggerInViewEvent" props={ eventName: "load-more-in-view", data: { page_number: pageNumber + 1 } } />
        <if(pageNumber === 1 && input.header)>
          <div class="load-more-header">
            $!{input.header}
          </div>
        </if>
        <${Component} ...input.componentInput nodes=nodes page-info=pageInfo page-number=pageNumber />

        $ const { endCursor, hasNextPage } = pageInfo;
        $ delete queryParams.skip;
        $ delete queryParams.queryFragment;
        $ delete queryParams.renderBody;
        $ const provide = {
          ...input,
          queryParams: { ...queryParams, after: endCursor },
        };

        <marko-web-load-more-trigger
          ...input.triggerInput
          append-to=input.appendTo
          max-pages=input.maxPages
          expand=input.expand
          page-number=pageNumber
          provide=provide
          show=hasNextPage
        />
      </marko-web-page-container>
    </if>
  </marko-web-query>
</if>
